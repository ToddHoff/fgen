// FILE             : SsmCoordinatorService.h
//
// DESCRIPTION      : Singleton wrapper for the Ssm object.
//
//
#ifndef _SsmCoordinatorService_h_
#define _SsmCoordinatorService_h_

#include "Ssm/SsmCoordinatorActor.h"
#include "Osencap/LnMutex.h"  


 
/**
 * Start the Ssm. SsmCoordinatorService provides a singleton 
 * wrapper for making SsmCoordinatorActor available.
 * This wrapper can be autogenerated so is not made 
 * part of the object.
 *
 * @see SsmCoordinatorActor
 */
class SsmCoordinatorService
{
public:
   /**
    * Return an SsmCoordinatorActor object as a singleton. The double check
    * singleton algorithm is used. A 0 return means there was
    * an exception. Developers should use this as the access point to
    * get the SsmCoordinatorActor object.
    *
	* <B> Preconditions </B><BR>
	* 1. Configuration must be passed on the first call to Singleton.
	*
    * <B>Example</B><BR>
    * 
	* See package documenation on how to start Ssm.
	*
	* @param cfg Configuration properties. This is an optional
	*   parameter. See the package documentation for information
	*   on the configuration parameters. When SsmCoordinatorActor is first started
	*   cfg must be provided. Devlopers using Ssm after it has started
	*   should not provide any configuration information.
	*
    * @exception LnException/START_FAILURE/MOVE_ONLINE_FAILED -
    *   If the module didn't couldn't move online for some reason.
    * @exception LnException/START_FAILURE/TIMED_OUT - If
    *   the module didn't start in the specified period of time.
    * @exception LnException/... - Some other exception thrown
    *   by the module.
	*
	* @see AaaPs
    */
   static SsmCoordinatorActor*     Singleton(Properties* cfg= 0);


   /**
    * Set the singleton. This allows Ps to be created by other means
	* and have it set in the singleton for access purposes. The setting
	* of Ps in the singleton must happen <B>very</B> early in the
	* system init stage or some other code will likely call the singleton
	* and create Ps.
	*
	* <B>Preconditions:</B><BR>
	* REQUIRE(mpSingleton == 0)  // the singleton can't have been created 
	*/
   static void Singleton(SsmCoordinatorActor* pPs);


protected:
    static SsmCoordinatorActor*    mpSingleton;  // the variable holding the singleton

};

#endif // _SsmCoordinatorService_h_
